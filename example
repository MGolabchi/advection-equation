#include <deal.II/base/quadrature_lib.h>
#include <deal.II/base/function.h>
#include <deal.II/base/logstream.h>
#include <deal.II/base/utilities.h>
#include <deal.II/lac/vector.h>
#include <deal.II/lac/solver_cg.h>
#include <deal.II/lac/precondition.h>
#include <deal.II/grid/tria.h>
#include <deal.II/grid/grid_generator.h>
#include <deal.II/fe/fe_q.h>
#include <deal.II/dofs/dof_handler.h>
#include <deal.II/dofs/dof_tools.h>
#include <deal.II/numerics/data_out.h>
#include <deal.II/numerics/vector_tools.h>
#include <deal.II/numerics/matrix_tools.h>
#include <deal.II/numerics/error_estimator.h>
#include <deal.II/numerics/solution_transfer.h>
#include <deal.II/numerics/fe_field_function.h>
#include <deal.II/numerics/fe_values.h>
#include <deal.II/numerics/matrix_tools.h>

#include <iostream>
#include <fstream>

using namespace dealii;

template <int dim>
class AdvectionDiffusionProblem
{
public:
  AdvectionDiffusionProblem(const unsigned int degree);
  void run();

private:
  void setup_system();
  void assemble_system();
  void solve();
  void output_results(const unsigned int cycle) const;

  const unsigned int   degree;

  Triangulation<dim>   triangulation;
  FE_Q<dim>            fe;
  DoFHandler<dim>      dof_handler;

  SparsityPattern      sparsity_pattern;
  SparseMatrix<double> system_matrix;

  Vector<double>       solution;
  Vector<double>       system_rhs;

  double               diffusion_coefficient;
  double               advection_coefficient;
  Point<dim>           advection_direction;

  static constexpr double pi = numbers::PI;
};

template <int dim>
class AdvectionDiffusionCoefficients : public Function<dim>
{
public:
  AdvectionDiffusionCoefficients(const double diffusion_coefficient,
                                 const double advection_coefficient,
                                 const Point<dim> advection_direction);

  virtual double value(const Point<dim> & p, const unsigned int component = 0) const override;

private:
  const double       diffusion_coefficient;
  const double       advection_coefficient;
  const Point<dim>   advection_direction;
};

template <int dim>
AdvectionDiffusionProblem<dim>::AdvectionDiffusionProblem(const unsigned int degree)
  :
  degree(degree),
  fe(degree),
  dof_handler(triangulation)
{
  diffusion_coefficient = 1.0;
  advection_coefficient = 1.0;
  advection_direction = Point<dim>(1.0, 0.0);
}

template <int dim>
void AdvectionDiffusionProblem<dim>::setup_system()
{
  dof_handler.distribute_dofs(fe);

  std::cout << "Number of active cells: "
            << triangulation.n_active_cells()
            << std::endl
            << "Number of degrees of freedom: "
            << dof_handler.n_dofs()
            << std::endl;

  DynamicSparsityPattern dsp(dof_handler.n_dofs());
  DoFTools::make_sparsity_pattern(dof_handler, dsp);
  sparsity_pattern.copy_from(dsp);

  system_matrix.reinit(sp
  solution.reinit(dof_handler.n_dofs());
  system_rhs.reinit(dof_handler.n_dofs());
}

template <int dim>
void AdvectionDiffusionProblem<dim>::assemble_system()
{
  system_matrix = 0;
  system_rhs = 0;

  QGauss<dim> quadrature_formula(degree+1);

  FEValues<dim> fe_values(fe, quadrature_formula,
                          update_values | update_gradients |
                          update_quadrature_points | update_JxW_values);

  const unsigned int dofs_per_cell = fe.dofs_per_cell;
  const unsigned int n_q_points = quadrature_formula.size();

  FullMatrix<double> cell_matrix(dofs_per_cell, dofs_per_cell);
  Vector<double>     cell_rhs(dofs_per_cell);

  std::vector<types::global_dof_index> local_dof_indices(dofs_per_cell);

  AdvectionDiffusionCoefficients<dim> coefficients(diffusion_coefficient, advection_coefficient, advection_direction);

  for (const auto &cell : dof_handler.active_cell_iterators())
    {
      fe_values.reinit(cell);

      cell_matrix = 0;
      cell_rhs = 0;

      for (unsigned int q_index = 0; q_index < n_q_points; ++q_index)
        {
          for (unsigned int i = 0; i < dofs_per_cell; ++i)
            {
              const Tensor<1,dim> grad_phi_i = fe_values.shape_grad(i,q_index);
              const double        div_phi_i = fe_values.shape_div(i,q_index);

              for (unsigned int j = 0; j < dofs_per_cell; ++j)
                {
                  const Tensor<1,dim> grad_phi_j = fe_values.shape_grad(j,q_index);
                  const double        div_phi_j = fe_values.shape_div(j,q_index);

                  cell_matrix(i,j) += (grad_phi_i * coefficients.value(fe_values.quadrature_point(q_index)) * grad_phi_j
                                       - advection_coefficient * grad_phi_i * advection_direction * fe_values.shape_value(j,q_index)
                                       + diffusion_coefficient * div_phi_i * div_phi_j)
                                      * fe_values.JxW(q_index);
                }

              cell_rhs(i) += fe_values.shape_value(i,q_index) * 1.0 * fe_values.JxW(q_index);
            }
        }

      cell->get_dof_indices(local_dof_indices);
      for (unsigned int i = 0; i < dofs_per_cell; ++i)
        {
          for (unsigned int j = 0; j < dofs_per_cell; ++j)
            system_matrix.add(local_dof_indices[i], local_dof_indices[j], cell_matrix(i,j));

          system_rhs(local_dof_indices[i]) += cell_rhs(i);
        }
    }

  std::map<types::global_dof_index,double> boundary_values;
  VectorTools::interpolate_boundary_values(dof_handler, 0, Functions::ZeroFunction<dim>(), boundary_values);
  MatrixTools::apply_boundary_values(boundary_values, system_matrix, solution, system_rhs);
}

template <int dim>
void AdvectionDiffusionProblem<dim>::solve()
{
  SolverControl solver_control(1000, 1e-12);
  SolverCG<> solver(solver_control);

  PreconditionSSOR<> preconditioner;
  preconditioner.initialize(system_matrix, 1.2);

  solver.solve(system_matrix, solution, system_rhs, preconditioner);

  std::cout << "   " << solver_control.last_step()
            << " CG iterations needed to obtain convergence."
            << std::endl;
}

template <int dim>
void AdvectionDiffusionProblem<dim>::output_results(const unsigned int cycle) const
{
  std::ostringstream filename;
  filename << "solution-" << cycle << ".vtk";

  DataOut<dim> data_out;
  data_out.attach_dof_handler(dof_handler);
  data_out.add_data_vector(solution, "solution");
  data_out.build_patches();

  std::ofstream output(filename.str());
  data_out.write_vtk(output);
}

template <int dim>
void AdvectionDiffusionProblem<dim>::run()
{
  for (unsigned int cycle = 0; cycle < n_cycles; ++cycle)
    {
      std::cout << "Cycle " << cycle << ':' << std::endl;

      if (cycle == 0)
        {
          GridGenerator::hyper_cube(triangulation);
          triangulation.refine_global(n_refinements);
        }
      else
        triangulation.refine_global(1);

      setup_system();
      assemble_system();
      solve();
      output_results(cycle);
    }
}

int main()
{
  try
    {
      AdvectionDiffusionProblem<2> advection_diffusion_problem;
      advection_diffusion_problem.run();
    }
  catch (std::exception &exc)
    {
      std::cerr << std::endl << std::endl
                << "----------------------------------------------------"
                << std::endl;
      std::cerr << "Exception on processing: " << std::endl
                << exc.what() << std::endl
                << "Aborting!" << std::endl
                << "----------------------------------------------------"
                << std::endl;

      return 1;
    }

  return 0;
}

